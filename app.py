from flask import Flask, request, render_template
from androguard.misc import AnalyzeAPK
import pickle
app = Flask(__name__)
model = pickle.load(open('model.pkl', 'rb'))


@app.route('/')
def home(): 
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
       uploaded_file = request.files['file']
       if uploaded_file.filename != '':
           # Save the file temporarily or process it directly
           filepath = 'C:\Users\abdel\OneDrive\Desktop\FINAL PROJECT GRAD' + uploaded_file.filename
           uploaded_file.save(filepath)
           # Now, extract features and predict
           features = extract_features_from_apk(filepath)
           prediction = model_predict(features)
           return render_template('dashboard.html', prediction=prediction, features=features)
       return 'No file uploaded'

def extract_features_from_apk(filepath):
    a, d, dx = AnalyzeAPK(filepath)

    features = {}

    # Extracting some features from the APK file
    features['api_calls'] = [call.class_name + call.name for call in dx.get_external_methods()]
    features['permissions'] = a.get_permissions()
    features['activities'] = a.get_activities()
    features['receivers'] = a.get_receivers()
    features['services'] = a.get_services()

    return features


def model_predict(features):
       # Load your model and predict based on features
       from pickle import load
       clf = load('model.pkl')
       return clf.predict([features])[0]


if __name__ == '__main__':
    app.run(debug=True)